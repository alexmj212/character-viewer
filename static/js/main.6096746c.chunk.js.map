{"version":3,"sources":["App.module.scss","components/Header/Header.module.scss","components/Content/Content.module.scss","components/Footer/Footer.module.scss","components/Layout/Layout.module.scss","components/Header/Header.tsx","components/Content/Content.tsx","components/Footer/Footer.tsx","components/Layout/Layout.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","app","header","content","footer","layout","Header","react_default","a","createElement","className","styles","href","React","Component","Content","Footer","Layout","components_Header_Header","components_Content_Content","components_Footer_Footer","App","components_Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EACAA,EAAAC,QAAA,CAAkBC,IAAA,qCCAlBF,EAAAC,QAAA,CAAkBE,OAAA,yCCAlBH,EAAAC,QAAA,CAAkBG,QAAA,2CCAlBJ,EAAAC,QAAA,CAAkBI,OAAA,yCCAlBL,EAAAC,QAAA,CAAkBK,OAAA,oOCgBHC,mLAZP,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAOT,QACtBK,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,0BAAR,uBANHC,IAAMC,4BCUZC,mLARP,OACIR,EAAAC,EAAAC,cAAA,WAASC,UAAWC,IAAOR,SAA3B,wBAHUU,IAAMC,4BCUbE,mLARP,OACIT,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAOP,QAA1B,uBAHSS,IAAMC,4BCeZG,mLAVP,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAON,QACnBE,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAACW,EAAD,cANKP,IAAMC,WCOZO,MARf,WACI,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOV,KACnBM,EAAAC,EAAAC,cAACa,EAAD,QCIQC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6096746c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2ziFi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1v0yI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__1uhUL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__7dIj9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"Layout_layout__vps_j\"};","import React from 'react';\r\nimport styles from './Header.module.scss';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <header className={styles.header}>\r\n                <ul>\r\n                    <li>\r\n                        <a href=\"https://alexmj212.dev/\">alexmj212</a>\r\n                    </li>\r\n                </ul>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport styles from './Content.module.scss';\r\n\r\nclass Content extends React.Component {\r\n    render() {\r\n        return (\r\n            <section className={styles.content}>\r\n                Hello Content\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Content\r\n","import React from 'react';\r\nimport styles from './Footer.module.scss';\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <footer className={styles.footer}>\r\n                Hello Footer\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react';\r\nimport Header from '../Header/Header';\r\nimport Content from '../Content/Content';\r\nimport Footer from '../Footer/Footer';\r\nimport styles from './Layout.module.scss';\r\n\r\nclass Layout extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className={styles.layout}>\r\n                <Header/>\r\n                <Content/>\r\n                <Footer/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout\r\n","import React from 'react';\r\nimport './App.module.scss';\r\nimport Layout from './components/Layout/Layout';\r\nimport styles from './App.module.scss';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={styles.app}>\r\n            <Layout />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n\r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n\r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n\r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n\r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n\r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n\r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n\r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}